List<int> numbers = new List<int> {2,4,8,16,32,64};

Without LINQ 
List<int> numbersGreaterThanTen = new  List<int>(); 

foreach(int number in numbers) 
{
	if (number > 10) 
	numbersGreaterThanTen.Add(number); 
}

numbersGreaterThanTen 
>{16,32,64}

With LINQ 
from number in numbers where number >10 select number;
>{16,32,64}

IEnumerable<int> numbersGreaterThan10 = from n in numbers where n >10 select n;

numbersGreaterThanTen.Count(); 
>3 

----- 

public class Bird
{
	public string Name {get; set;}
	public string Color {get; set;}
	public int Sightings {get; set;}
}

List<Bird> birds = new List<Bird> {
	new Bird {Name = "Cardinal", Color = "Red", Sigthings = 3},
	new Bird {Name = "Dove", Color = "White", Sigthings = 2}
}

csharp> birds
 > {Bird, Bird}

birds.Add(new Bird ... ); 

or 

Bird blueJay = new Bird(); 
blueJay.Name = .... 


var birds = new[] 
{ 
    new { Name = "Pelican", Color = "White" }, 
    new { Name = "Swan", Color = "White" }, 
    new { Name = "Crow", Color = "Black" } 

};

var mysteryBird = new { Color = "White", Sightings = 3 };
var matchingBirds = from b in birds where b.Color == mysteryBird.Color select new { BirdName == b.Name};


from b in birds orderby b.Name decending select b.Name; 


from b in birds orderby b.Color, b.Sightings descending select new {b.Name, b.Sightings};



var birdsByColor = from b in birds group b by b.Color; 
foreach (var bird in birdsByColor){
	Console.WriteLine(bird.Key + "" + bird.Count());
}

Red 1 
Black 2 
White 1 
... 


from b in birds 
group b by b.Color into birdsByColor 
where birdsByColor.Count() > 1 
select new {Color = birdsByColor.key, Count = birdsByColor.Count() };

{Color = Red, Count = 2}, {Color = White, Count = 3}




Class Program 
{
	delegate void SayGreeting(string Name); 
	public static void SayHello(string name); 
	{
		Console.WriteLine(string.Format("Hello, {0}", name));
	}

	string void Main(string[] args)
	{
		SayGreeting sayGreeting = new SayGreeting(SayHello); 
		Console.WriteLine("What's your name?"); 
		string input = Console.ReadLine(); 
		sayGreeting(input); 
	}
}

Class Program 
{
	delegate void SayGreeting(string Name); 
	public static void SayHello(string name); 
	{
		Console.WriteLine(string.Format("Hello, {0}", name));
	}

	public static void SayGoodbye(string name); 
	{
		Console.WriteLine(string.Format("Later, {0}", name));
	}

	string void Main(string[] args)
	{
		SayGreeting sayGreeting = delegate(string name)
		{
			Console.WriteLine(string.Format("Hello, {0}", name));
		}; 

		Console.WriteLine("What's your name?"); 
		string input = Console.ReadLine(); 
		sayGreeting(input); 
		Console.ReadLine(); 
		sayGreeting = new SayGreeting(SayGoodbye); 
		sayGreeting(input); 
	}
}



using System;

namespace CodeChallenges
{
    class Program
    {
        public delegate int MathOperation(int number);
        
        public static int Add (int number){
            return number + number; 
        }
        
        public static int Square (int number) {
            return number * number; 
        }
        
        MathOperation add = new MathOperation(Add); 
        MathOperation square = new MathOperation(Square); 

        
        static void Main(string[] args)
        {
        }
    }
}




ACTIONS 
Class Program 
{
	string void Main(string[] args)
	{
		Action<string> sayGreeting; 
		sayGreeting = delegate(string name)
		{
			Console.WriteLine(string.Format("Hello, {0}", name));
		}; 

		Console.WriteLine("What's your name?"); 
		string input = Console.ReadLine(); 
		sayGreeting(input); 
		Console.ReadLine(); 
		sayGreeting = = delegate(string name)
		{
			Console.WriteLine(string.Format("Later, {0}", name));
		}; 
		sayGreeting(input); 
	}
}




Class Program 
{
	string void Main(string[] args)
	{
		Action<string> sayGreeting; 

		Func<string, string> conversate = delegate(string message)
		{
			Console.WriteLine(message); 
			return Console.ReadLine(); 
		}; 

		string input = conversate("What's your name?"); 

		sayGreeting = delegate(string greeting)
		{
			Console.WriteLine(string.Format(greeting, input));
		}; 

		sayGreeting("Hello, {0}");
		conversate("Nice to see you!"); 
		conversate("Are you doing well?");
		sayGreeting("Later, {0}");
	}
}


using System;

namespace Treehouse.CodeChallenges
{
    public class Program
    {
        public Action<int, Func<int,int>> DisplayResult = delegate (int result, Func<int,int> operation){
            Console.WriteLine(operation(result)); 
        };
        
        public Func<int, int> Square = delegate(int number)
        {
            return number * number;
        };
        
    }
}


LAMBDA OPERATOR => (X) => x + 2 

birds.Where((b) => b.Color == "Red"); 
birds.OrderBy(b => b.Name).ThenBy(b=>b.Sightings);




using System.Collections.Generic;
using System.Linq;

namespace Treehouse.CodeChallenges
{
    public class NumberAnalysis
    {
        private List<int> _numbers;
        public NumberAnalysis()
        {
            _numbers = new List<int> { 2, 4, 6, 8, 10 };
        }
        
        public IEnumerable<int> NumbersGreaterThanFive()
        {
            return _numbers.Where((n)=> n > 5); 
        }
		
		public IEnumerable<int> ReverseNumbers()
        {
            return _numbers.OrderByDescending((n)=>n); 
        }

    }
}


birds.Any(b=>b.Name == "Crow")
> true 

if(!birds.Any(b => b.Name == "Crow")){
	birds.Add(new Bird {Name = "Crow"});
}


var sparrow = new Bird {Name = "Sparrow", Color= "Brown"}
if (!birds.Contains(sparrow)){
	birds.Add ... 
}

birds.All(b=> b.Name != "Sparrow")
> false 


birds.Where(b=> b.Name =="Crow").Single(); 
> Name: Crow, Color: Black, Sightings: 11 

birds.Single(b=> b.Name == "Crow") 
> Name: Crow, Color: Black, Sightings: 11 

birds.SingleOrDefault > returns Null if nothing found 

var numbers = list ... 
numbers.SingleOrDefault(n => n == 99) 
> 0  
No number found 

birds.First 
birds.Last 

birds.First(b=> b.Name == "") 

numbers.ElementAt(2) 
similar to numbers[2]

var redBirds = birds.Where(b=> b.Color == "red"); 
redBirds[0]
>error 

redBirds.ElementAt(0); 
Name: Cardinal, Color: Red ... 


birds.Take(3); 
> returns first 3 birds 

birds.OrderBy(b=> b.Name.Length).Take(3) 
> returns first 3 with shortest name 

birds.OrderBy(b => Name.Length).Skip(3).Take(3)
>skips first 3 and takes next 3 

birds.TakeWHile(b => b.Name.Lenth < 6)
>Take while loop 

birds.SkipWhile(b=> b.Name.Length > 6)
>skip while loop


var colors - new List<string> {"Blue", "Red"};

var favoriteBirds = FROM b in birds JOIN c IN colors ON b.Color EQUALS c SELECT b; 

favoriteBirds 
> returns birds where color matches colors in List above 

 outer.Join(inner, 
			outerKeySelector, 
			innerKeySelector, 
			resultSelector); 

var favoriteBirds = birds.Join(colors, 
	b=>b.Color, 
	c=>c, 
	(bird, color)=> bird);  


var groupedBirds = colors.GroupJoin(birds, 
c=> c, 
b=> b.Color 
(color, bird) => new {Color = color, Birds = bird});


Create a variable named ourBirds and assign to it a LINQ query that is the result of a join from myBirds onto yourBirds using the Name property as the key. Make sure to return the birds that are the same between the two lists.


var myBirds = new List<Bird> 
{ 
    new Bird { Name = "Cardinal", Color = "Red", Sightings = 3 },
    new Bird { Name =  "Dove", Color = "White", Sightings = 2 },
    new Bird { Name =  "Robin", Color = "Red", Sightings = 5 }
};

var yourBirds = new List<Bird> 
{ 
    new Bird { Name =  "Dove", Color = "White", Sightings = 2 },
    new Bird { Name =  "Robin", Color = "Red", Sightings = 5 },
    new Bird { Name =  "Canary", Color = "Yellow", Sightings = 0 }
};

var ourBirds = from b in myBirds join y in yourBirds on b.Name equals y.Name select b;


from b in birds group b by b.COlor 

birds.GroupBy(b=> b.Color) 

birds.GroupBy(b=> b.Color).Select(g => new {color = g.Key, Count = g.Count()})
>Bird counts for each color

birds.SUm(b=>b.Sightings); 
> 32 

birds.GroupBy(b=> b.Color).Select(g => new {Color = g.Key, Sightings = g.Sum(b => b.Sightings})

birds.Average(b=>b.Sightings) 
birds.Min(b => b.Sightings) 
birds.Max 


var myBirds = new List<Bird> 
{ 
    new Bird { Name = "Cardinal", Color = "Red", Sightings = 3 },
    new Bird { Name =  "Dove", Color = "White", Sightings = 2 },
    new Bird { Name =  "Robin", Color = "Red", Sightings = 5 }
};

var yourBirds = new List<Bird> 
{ 
    new Bird { Name =  "Dove", Color = "White", Sightings = 2 },
    new Bird { Name =  "Robin", Color = "Red", Sightings = 5 },
    new Bird { Name =  "Canary", Color = "Yellow", Sightings = 0 }
};

var ourBirds = myBirds.Join(yourBirds,
                            mb => mb.Name,
                            yb => yb.Name,
                            (mb, yb) => (mb));

var sumOfSightings = ourBirds.Sum(b=>b.Sightings); 
var averageSightings = ourBirds.Average(b=>b.Sightings); 


birds.Select(b=>b.Color)
{Red, Red, Yellow, Black, Blue}

birds.Select(b=> b.Color).Distinct()  
{Red, Yellow, Black, Blue}


var colors = new List<string> {Pink, Blue, Teal}
colors.Except{birds.Select(b=>b.COlor).Distinct()}
> Pink, Teal 
No birds with pink and teal colors 

colors.Union(birds.Select(b=>b.Color).Distinct())
returns all colors 

Intersect returns Overlap 
colors.Intersect(birds.Select(b=>b.Color).Distinct())
> Blue 

colors.Concat(birds.Select(b => b.Color)) 
Returns all and duplicates 


var numbers = Enumerable.Range(0,10); //Only ints 

Enumerabel.Repeat("repeat", 10) //repeat any element x times 

var var emptyBirds = Enumberable.Empty<bird>(); 

var numbers = Enumberable.Empty<int>(); 
numbers.DefaultIfEmpty() 
>0
default value 0


birds.Where(b=>b.Color == "red").ToList(); 
> returns list of birds where color red 

redBirds = birds.Where(b=>b.Color == "red"); 

redBirds.ToList(); 

redBirds.ToArray(); 

AsEnumerable 
Cast 
OfType 
ToArray
ToDictionary
ToList
ToLookup 



birds.SelectMany(b=> b.Sightings).GroupBy(s = s.Place.Country).Select(grp => new {Country = grp.Key, Sightings = grp.Count()})



  public static bool _ContainsAny(this string source, IEnumerable<string> stringsToMatch)
        {
            return stringsToMatch.Any(item => source.Contains(item));  
        }